<chapter>
<title> Compiling Mexgdal</title>


<sect1>
	<title> Why Compile? </title>
<para>
I'm not distributing any binaries anymore, you have to compile this
yourself.  Depending upon what platform you are on, this means you
may also have to compile GDAL yourself.  But before you shed crocodile
tears and start tearing out your hair, compiling GDAL isn't all that hard.  If you
use Linux, there may be pre-compiled packages such as RPMs available;
you will need to consult your local package management system.  If you
can forgive a shameless plug, Mandriva Linux makes this a breeze...
But anyway, if you can't find any RPMs, just grab the source code from
<ulink url="http://www.remotesensing.org/gdal/">http://www.remotesensing.org/gdal/</ulink>.
</para>

</sect1>









<sect1 id="r14_mandriva">

<title> Case Study:  i586 Mandriva 2006, R14</title>

<para>
The following RPMs were installed
via URPMI from the contrib media source (consult
<ulink url="http://easyurpmi.zarb.org/">Easy URPMI</ulink> 
for information on how to set up your URPMI media sources).
Then copy the <filename>mexopts.sh</filename> from your 
<filename class="directory">${MATLAB}/bin</filename> 
directory into your working directory.  

<simplelist type="vert" columns="1">
	<member>gdal-1.2.6-3mdk</member>
	<member>libgdal1-1.2.6-3mdk</member>
	<member>libgdal1-devel-1.2.6-3mdk</member>
</simplelist>

Then the bottom of <filename>mexopts.sh</filename> was modified to read

<programlisting>
	CLIBS="$CLIBS -lgdal"
</programlisting>

Save these edits and invoke <filename>make</filename> from the unix command line.
Because the RPMs install in the normal locations, i.e. 
<filename class="directory">/usr/lib</filename>
and
<filename class="directory">/usr/include</filename>,
the edits to 
<filename>mexopts.sh</filename>
are pretty minimal.

</para>
</sect1>








<sect1>

<title> Case Study:  i586 Mandriva 2006, R2006a</title>

<para>
Base system is 
<simplelist type="vert" columns="1">
	<member>gcc 4.0.1-5mdk</member>
	<member>kernel 2.6.12-22mdk </member>
	<member>MATLAB Version 7.2.0.294 (R2006a)</member>
</simplelist>
</para>

<para>
	The 
	<link linkend="r14_mandriva"> instructions for the i586 R14 case study</link>
	didn't quite work here, as the attempt to run the test case resulted in
	<programlisting>
>> test_gdal
??? Invalid MEX-file '/home/jevans/matlab/mexgdal/mexgdal.mexglx': 
	/opt/MatlabR2006a/bin/glnx86/../../sys/os/glnx86/libgcc_s.so.1: 
	version `GCC_4.0.0' not found (required by /usr/lib/libgeos.so.2).

Error in ==> gdaldump at 67
metadata = mexgdal ( gdalfile, options );

Error in ==> test_gdal at 3
m = gdaldump ( f );


	</programlisting>

	This is pretty common when building mex-files on linux.  The first thing to suspect
	in this case are the libraries in <filename class="directory">${MATLAB}/sys/os/glnx86</filename>.

	The command-line steps were taken.

	<programlisting>
# cd ${MATLAB}/sys/os/glnx86
# mkdir tmp
# mv libg2c* libgcc* libi* libstdc* tmp
	</programlisting>

	Matlab was then restarted, and the mex-file worked just fine.


</para>
</sect1>








<sect1>

<title> Case Study:  x86-64 CentOS 4.1, older gcc</title>

<para>
Base system is 
<simplelist type="vert" columns="1">
	<member>gcc 3.4.5</member>
	<member>kernel 2.6.9-11.ELsmp</member>
	<member>MATLAB Version 7.1.0.183 (R14) Service Pack 3</member>
</simplelist>
</para>

<para>
This linux distribution doesn't readily have an RPM for gdal, so
in this case we compile it from source.  First we retrieve and unpack
gdal-1.3.2 from
<ulink url="http://www.remotesensing.org/gdal/">http://www.remotesensing.org/gdal/</ulink>.
In order to build the library, I issued the commands

<programlisting>
CFLAGS="-fPIC" CXXFLAGS="-fPIC" ./configure --prefix=/opt/compiled/gnu/gdal-1.3.2  
</programlisting>

When building mex-files on the x86-64 platform, one pretty much always has to
set <envar>CFLAGS</envar> and <envar>CXXFLAGS</envar> to include <userinput>-fPIC</userinput>.

Next I copied the 
<filename>$MATLABROOT/bin/mexopts.sh</filename> 
into my mexshape directory and altered the CFLAGS and CLIBS section down
at the very bottom to read

<programlisting>
GDAL="/opt/compiled/gnu/gdal-1.3.2"
CFLAGS="-fPIC $CFLAGS -I${GDAL}/include"
CLIBS="$CLIBS -L${GDAL}/lib -lgdal"
</programlisting>

From the unix command line, I issue the command

<programlisting>

# make 

</programlisting>

... and it fails.  For some reason, there's a C++ style
comment in one of the gdal include files, and this version
of gcc doesn't like it.  But as far as g++ is concerned, that's just dandy.
So I went back to the 
<filename>mexopts.sh</filename> 
file and make it read


<programlisting>
CC="g++"
GDAL="/opt/compiled/gnu/gdal-1.3.2"
CFLAGS="-fPIC $CFLAGS -I${GDAL}/include"
CLIBS="$CLIBS -L${GDAL}/lib -lgdal"
</programlisting>

and then it compiled and ran fine.  The issue here really wasn't that the platform
was x86-64, but that the version of gcc was a little too old.


</para>



</sect1>






<sect1>

<title> Case Study:  Solaris</title>

<para>
Base system is 
<simplelist type="vert" columns="1">
	<member>gcc 4.1.1</member>
	<member>SunOS ahab 5.8 Generic_108528-15 sun4u sparc SUNW,Ultra-60 Solaris</member>
	<member>MATLAB Version 7.0.1.24704 (R14) Service Pack 1</member>
	<member>gdal 1.3.2</member>
</simplelist>
</para>

<para>
First we retrieve and unpack
gdal-1.3.2 from
<ulink url="http://www.remotesensing.org/gdal/">http://www.remotesensing.org/gdal/</ulink>.
In order to build the library, I issued the commands

<programlisting>
./configure --prefix=/m1/local ; make ; make install
</programlisting>

Now copy the 
<filename>$MATLABROOT/bin/gccopts.sh</filename> 
into your mexshape directory, rename it to 
<filename>mexopts.sh</filename>,
and alter the CFLAGS and CLIBS section down
at the very bottom to read

<programlisting>
GDAL="/m1/local"
CFLAGS="$CFLAGS -I${GDAL}/include"
CLIBS="$CLIBS -L${GDAL}/lib -lgdal "
</programlisting>

From the unix command line, issue the command

<programlisting>

# make 

</programlisting>

... and it works.
</para>



</sect1>














<sect1>

<title> Case Study:  Windows</title>


<para>
I've not worked on a windows version, but the following information was provided to me courtesy of David Balder...
</para>

<blockquote><attribution>David Balder</attribution>
<para>

	The .dll uses some other dlls from the gdal distribution. I've build
	this one against FWTools, a precompiled version of various open source
	GIS packages distributed by Frank Warmerdam. More specifically, I've
	build this one against GDAL 1.2.6, contained in FWTools version 0.9.8.

</para>
<para>
	Steps to install FWTools:
	<itemizedlist>
		<listitem> <para>
				Go to http://fwtools.maptools.org/ and get the installer.  
		</para> </listitem>
		<listitem> <para>
				Install wherever you like.
		</para> </listitem>
		<listitem> <para>
				Add the 'Path:\to\FWTools\bin' to your
				path variables (right-click "My computer",
				"properties", "Advanced", "Environmental
				variables", edit  path.
		</para> </listitem>
		<listitem> <para>
				Close it all.
		</para> </listitem>
		<listitem> <para>
				Start Matlab. If it was already running,
				restart it: it needs the new Path variable
		</para> </listitem>
		<listitem> <para>
				Add the directory with the readgdal.m,
				dumpgdal.m and mexgdal.dll files to your
				'Set Path' dialogue box.
		</para> </listitem>
		<listitem> <para>
				Have fun ;)
		</para> </listitem>
	</itemizedlist>


	As far as compiling mexgdal, I've succesfully used:

	<itemizedlist>
		<listitem> <para>
			<programlisting>
mex mexgdal.c -v -IPath:\to\FWTools\include Path:\to\FWTools\lib\gdal_i.lib -O -DWIN32
			</programlisting>
		</para> </listitem>
	</itemizedlist>



</para>
</blockquote>

<para>
	I personally have not been able to get this to work with
	<filename>lcc</filename>, R14, and Windows XP.
</para>



</sect1>














</chapter>





